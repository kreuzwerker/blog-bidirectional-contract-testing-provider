image: registry.eu.365farmnet.com/devops/buildimage-universal:master

variables:
  SERVICE_NAME: pacttest-service-be
  URL_BASE: pacttest-service/v1/
  VERSION_TAG: $CI_COMMIT_SHORT_SHA
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
  DOCKER_BUILDKIT: 1
  FARMNET_CDK: 1.72.0

  # Images
  BUILD_IMAGE: registry.eu.365farmnet.com/devops/buildimage-be:openjdk-15
  PACT_IMAGE: registry.eu.365farmnet.com/devops/pact-image:fnl-774-pact-image
  REPORTING_IMAGE: registry.eu.365farmnet.com/devops/reporting-image:fnl-774-reporting-image
  DEPLOY_IMAGE: registry.eu.365farmnet.com/devops/deploy-image:master
  DOCKER_BUILD_IMAGE: registry.eu.365farmnet.com/container/docker/docker:19.03

stages:
  - buildArtifact
  - extendedTests
  - prepareRelease
  - deployServiceSb
  - checkStageDeployment
  - deployServiceStage
  - notifyAboutServiceDeploymentStage
  - checkProdDeployment
  - deployServiceProd
  - notifyAboutServiceDeploymentProd

# DOCKER_HOST: tcp://docker:2376 - for 'docker build' and Testcontainers
services:
  - name: registry.eu.365farmnet.com/container/docker/dind:19.03
    alias: docker

# These checks are quick, if everything is downloaded

.not_by_contract_verification:
  rules:
    - if: $CONTRACTS_ONLY
      when: never
    - when: always


packageAndTest:
  image: $BUILD_IMAGE
  stage: buildArtifact
  extends: .not_by_contract_verification
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - mvn -B clean verify -Dpact.provider.version=$VERSION_TAG -Dpact.verifier.publishResults=true -Djdk.tls.client.protocols=TLSv1.2
  artifacts:
    when: always
    paths:
      - target/${SERVICE_NAME}.jar

verifyContracts:
  image: $BUILD_IMAGE
  stage: buildArtifact
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - echo verify pacts $PACT_CONSUMER_TAG
    - mvn -B clean verify -Dpact.provider.version=$VERSION_TAG -Dpact.verifier.publishResults=true -Djdk.tls.client.protocols=TLSv1.2
  only:
    - triggers

canIdeployStage:
  stage: checkStageDeployment
  image: $PACT_IMAGE
  only:
    - master
  variables:
    STAGE: stage
  script:
    - can-i-deploy -p ${SERVICE_NAME} -v ${VERSION_TAG} -s ${STAGE}
  except:
    variables:
      - $CONTRACTS_ONLY

notifyPactBrokerAboutDeployment:
  stage: notifyAboutServiceDeploymentStage
  image: $PACT_IMAGE
  only:
    - master
  variables:
    STAGE: stage
  script:
    - notify-pact-broker-about-deployment -p ${SERVICE_NAME} -v ${VERSION_TAG} -s ${STAGE}
  except:
    variables:
      - $CONTRACTS_ONLY

# -------------------

canIdeployProd:
  stage: checkProdDeployment
  image: $PACT_IMAGE
  only:
    - master
  variables:
    STAGE: prod
  script:
    - can-i-deploy -p ${SERVICE_NAME} -v ${VERSION_TAG} -s ${STAGE}
  except:
    variables:
      - $CONTRACTS_ONLY

notifyPactBrokerAboutDeploymentProd:
  stage: notifyAboutServiceDeploymentProd
  image: $PACT_IMAGE
  only:
    - master
  variables:
    STAGE: prod
  script:
    - notify-pact-broker-about-deployment -p ${SERVICE_NAME} -v ${VERSION_TAG} -s ${STAGE}
  except:
    variables:
      - $CONTRACTS_ONLY
